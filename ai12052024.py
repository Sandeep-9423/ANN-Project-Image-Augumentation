# -*- coding: utf-8 -*-
"""AI12052024.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RvZrE2ngMnOFHB-L_3KPEqRn0vY36709
"""

import keras

from keras import Sequential

import pandas as pd
import numpy as np

from google.colab import files
file = files.upload()

data = pd.read_csv("cancerdata-cleanedwell.csv", sep=",")
data.head()

data.tail()

data.describe()

from sklearn.model_selection import train_test_split
X = data.drop("diagnosis", axis=1)
Y = data['diagnosis']

X_train,X_test,y_train,y_test = train_test_split(X,Y,test_size=0.25,random_state=0)

print("X_train:",X_train.shape)
print("X_test:",X_test.shape)
print("Y_train:",y_train.shape)
print("Y_test:",y_test.shape)

from keras.layers import Dense

model = Sequential()
model.add(Dense(31, kernel_initializer="he_uniform", activation='relu', input_shape=(31,)))    # this is forward propagation
model.add(Dense(78, kernel_initializer="he_uniform", activation='relu'))  # this is hidden forward propagation
model.add(Dense(1, kernel_initializer="he_uniform", activation='sigmoid'))  # this is Output forward Propagation
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])  # this is for backward propagation to check error accuracy rate required in AI to verify Result boolean
model.fit(X_train, y_train, batch_size=50)

model = Sequential()
model.add(Dense(31, kernel_initializer="he_uniform", activation='relu', input_shape=(31,)))    # this is forward propagation
model.add(Dense(78, kernel_initializer="he_uniform", activation='relu'))  # this is hidden forward propagation
model.add(Dense(1, kernel_initializer="he_uniform", activation='sigmoid'))  # this is Output forward Propagation
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])  # this is for backward propagation to check error accuracy rate required in AI to verify Result boolean
model.fit(X_train, y_train, epochs=50)

model = Sequential()
model.add(Dense(31, kernel_initializer="he_uniform", activation='relu', input_shape=(31,)))    # this is forward propagation
model.add(Dense(78, kernel_initializer="he_uniform", activation='relu'))  # this is hidden forward propagation
model.add(Dense(1, kernel_initializer="he_uniform", activation='sigmoid'))  # this is Output forward Propagation
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])  # this is for backward propagation to check error accuracy rate required in AI to verify Result boolean
model.fit(X_train, y_train, batch_size=50,epochs=10)



model.add(Dense(1,kernel_initializer="he_uniform",activation='sigmoid'))  ##this is Output forward Propagation

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuraccy'])  ##this is for backward propagation to  check error accuracy rate required in Ai to verify Result bollen

model.fit(X_train,y_train,batch_size=50,epochs=10)

model.fit(X_train,y_train,batch_size=50,epochs=10)